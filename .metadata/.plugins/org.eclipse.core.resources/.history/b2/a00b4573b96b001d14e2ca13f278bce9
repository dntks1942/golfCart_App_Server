package golfCartServer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.Scanner;



public class Server {
	public static void main(String[] args) throws IOException {
		Listener app = new Listener("app");	
		Listener cart = new Listener("cart");
		app.run();
		cart.run();
	}
} // class



class Listener extends Thread {
	static boolean isAppConnected = false;
	static boolean isCartConnected = false;
	int DevicePort;
	ServerSocket socket;
	static Socket appSocket;
	static Socket cartSocket;
	
	Listener(String device) throws IOException{
		if(device.equals("app")) DevicePort = 1234;
		else if(device.equals("cart")) DevicePort = 1235;
		socket = new ServerSocket(DevicePort);
	}
	@Override
	public void run() {
		try {
			if(DevicePort == 1234) {
				appSocket = socket.accept();
			}
			else if(DevicePort == 1235) {
				cartSocket = socket.accept();
			}
			
			System.out.println("Appsocket : " + DevicePort + "으로 연결되었습니다");
			if(DevicePort == 1234) {
				isAppConnected = true;
				while(!socket.isClosed()) {
					System.out.println("App가 접속함 : " + appSocket.getInetAddress());
					while(!(isAppConnected &&  isCartConnected)) {}
					passMessage(appSocket, cartSocket);
				}
			}
			else if(DevicePort == 1235) {
				isCartConnected = true;
				while(!socket.isClosed()) {
					System.out.println("Cart가 접속함 : " + cartSocket.getInetAddress());
					while(!(isAppConnected &&  isCartConnected)) {}
					passMessage(cartSocket, appSocket);
				}
			}
			
			System.out.println("socket : " + DevicePort + "으로 연결이 정상적으로 끊어졌습니다");
		} catch (SocketException e) {
			System.out.println("socket : " + DevicePort + "으로 연결이 비정상적으로 끊어졌습니다");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
}
	
	String getMessage(Socket socketUser) throws IOException {
		InputStream input = socketUser.getInputStream();
		BufferedReader br = new BufferedReader(new InputStreamReader(input));
		String identification = br.readLine();
		return identification;
	}
	void sendMessage(Socket socketUser, String message) throws IOException {
		OutputStream out = socketUser.getOutputStream();
		PrintWriter pr = new PrintWriter(out,true);
		pr.println(message);
	}
	void passMessage(Socket currentUserSocket, Socket targetUserSocket) throws IOException {
		String message = getMessage(currentUserSocket);
		sendMessage(targetUserSocket, message);
	}
} // class